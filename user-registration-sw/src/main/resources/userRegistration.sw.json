{
	"id": "userRegistration",
	"name": "User Registration Workflow",
	"version": "1.0",
	"specVersion": "0.8",
	"start": "Validate User",
	"functions": [
		{
			"name": "isValid",
			"operation": ". + if ((.user.email | length == 0) or (.user.firstName | length == 0) or (.user.lastName | length == 0)) then  {valid : false} else {valid : true} end | .",
			"type": "expression"
		},
		{
			"name": "assignUserIdAndPassword",
			"operation": ".user +  {username : (.user.firstName[:1]  + .user.lastName)} + {password : \"S3cr3T\"} | .",
			"type": "expression"
		},
		{
			"name": "Notify invalid data",
			"operation": "log",
			"type": "expression"
		},
		{
			"name": "Notify success",
			"operation": "log",
			"type": "expression"
		},
		{
			"name": "Notify server error",
			"operation": "log",
			"type": "expression"
		},
		{
			"name": "getUserByName",
			"operation": "api/swagger.json#getUserByName",
			"type": "rest"
		},
		{
			"name": "createUser",
			"operation": "api/swagger.json#createUser",
			"type": "rest"
		}
	],
	"errors": [
      {
        "name": "NotFound",
        "code": "404"
      },
      {
        "name": "ServerError",
        "code": "500"
      }
    ],
	"states": [
		{
			"name": "Validate User",
			"type": "operation",
			"actions": [
				{
					"name": "Validate User",
					"functionRef": {
						"refName": "isValid"						
					}
				}
			],
			"transition": "Is User Valid"
		},
		{
			"name": "Is User Valid",
			"type": "switch",
			"dataConditions": [
				{
					"name": "Valid",
					"condition": "${ .valid == true }",
					"transition": "Generate username and password"
				},
				{
					"name": "Invalid",
					"condition": "${ .valid == false }",
					"transition": "Notify invalid data"
				}
			]
		},
		{
			"name": "Generate username and password",
			"type": "operation",
			"actions": [
				{
					"name": "Generate username and password",
					"functionRef": {
						"refName": "assignUserIdAndPassword"
					}
				}
			],
			"transition": "Check already registered"
		},
		{
			"name": "Check already registered",
			"type": "operation",
			"actions": [
				{
					"name": "Is user registered",
					"functionRef": {
						"refName": "getUserByName",
						"arguments": {
							"user": "${ .user.username }"
						}
					}
				}
			],
			"onErrors": [
				{
					"errorRef": "NotFound",
					"transition": "Register user"
				}
			],
			"end": true
		},
		{
			"name": "Register user",
			"type": "operation",
			"actions": [
				{
					"name": "Create",
					"functionRef": {
						"refName": "createUser",
						"arguments": {
							"user": "${ .user }"
						}
					}
				}
			],
			"onErrors": [
				{
					"errorRef": "ServerError",
					"transition": "Notify server error"
				}
			],
			"transition": "Notify success"
		},
		{
			"name": "Notify invalid data",
			"type": "operation",
			"actions": [
				{
					"name": "Notify invalid data",
					"functionRef": {
						"refName": "Notify invalid data",
						"arguments": {
							"user": "${ .user }"
						}
					}
				}
			],
			"end": true
		},
		{
			"name": "Notify success",
			"type": "operation",
			"actions": [
				{
					"name": "Send successful notification",
					"functionRef": {
						"refName": "Notify success",
						"arguments": {
							"user": "${ .user }"
						}
					}
				}
			],
			"end": true
		},
		{
			"name": "Notify server error",
			"type": "operation",
			"actions": [
				{
					"name": "Send server error notification",
					"functionRef": {
						"refName": "Notify server error",
						"arguments": {
							"user": "${ .user }"
						}
					}
				}
			],
			"end": true
		}
	]
}
